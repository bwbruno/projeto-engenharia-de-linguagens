procedure merge(int[] arr, int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
 
    int[] L,M;
 
    for (i = 0; i < n1; i++){
        L[i] = arr[l + i];
    }
    for (j = 0; j < n2; j++){
        R[j] = arr[m + 1 + j];
    }

    i = 0;
    j = 0;
    k = l;
    while (i < n1 & j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

procedure mergeSort(int[] arr, int l, int r)
{
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

procedure printArrayProced(int[] A, int size)
{
    int i;
    for (i = 0; i < size; i++){
        print(A[i]);
    }
    print("\n");
}
 

function main() : int
{
    int[] arr = { 12, 11, 13, 5, 6, 7 };
    int arr_size = sizeof(arr) / sizeof(arr[0]);
    print("Given array is \n");
    printArrayProced(arr, arr_size);

    mergeSort(arr, 0, arr_size - 1);
 
    print("\nSorted array is \n");
    printArrayProced(arr, arr_size);
    return 0;
}

